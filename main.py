import asyncio

import aiogram.types
from aiogram.utils import executor

import tictokAPI
from config import *
from helper import check_link
from loader import dp, bt, debug_run, run_mode, logger
from tictokAPI import Downloader


@dp.message_handler()
async def tg_download(message: aiogram.types.Message):
    if message.from_user.id != ADMIN_ID:
        await message.answer("<i>–ü—Ä–∏–≤–µ—Ç! –Ø —á–∞—Ç-–±–æ—Ç, —Ä–∞–∑—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π –¥–ª—è –ª–∏—á–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –º–æ–∏–º —Å–æ–∑–¥–∞—Ç–µ–ª–µ–º."
                             " –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —è –Ω–µ –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω –¥–ª—è –æ–±—â–µ–≥–æ –ø—É–±–ª–∏—á–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è.\n\n"
                             "Hello! I am a chatbot designed for personal use by my creator."
                             " Unfortunately I am not intended for general public use.</i>\n<code>.te</code>",
                             parse_mode="HTML")
        logger.info(f"[TG] - Trying to use the bot by another user |"
                    f" User:{message.from_user.id} ({message.from_user.username})")
        return

    checked_url = check_link(message.text)
    if checked_url:
        resp = await message.answer("<i>‚¨áÔ∏è –ù–∞—á–∞–ª–æ –∑–∞–≥—Ä—É–∑–∫–∏ –≤–∏–¥–µ–æ...</i>", parse_mode="HTML")
        try:
            v = Downloader.download(checked_url)
        except tictokAPI.FailedDownload:
            await resp.edit_text("<i>–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É –ø–æ–∑–∂–µ</i>", parse_mode="HTML")
            logger.critical("[TG] - failed to download the video")
        else:
            logger.debug(f"Video Info: {v}")
            await resp.edit_text("üîÑ –û—Ç–ø—Ä–∞–≤–∫–∞ –≤–∏–¥–µ–æ..", parse_mode="HTML")
            with open(v.filename, "rb") as f:
                video = await bt.send_video(
                    chat_id=message.from_user.id,
                    video=f
                )
            await resp.delete()
            await video.edit_caption("<code>.te</code>", parse_mode="HTML")
            logger.success(f"[TG] - Success send to {message.from_user.id} ({message.from_user.username})")
            await delete_file(v.filename)
    else:
        await message.answer("<i>–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Å—Å—ã–ª–∫–∞!</i>", parse_mode="HTML")
        logger.info(f"[TG] - incorrect link ({message.text}) |"
                    f" User: {message.from_user.id} ({message.from_user.username}) ")


async def delete_file(path: str):
    logger.debug(f"[CLEAN] - The file will be deleted in a minute \"{path}\"")
    await asyncio.sleep(60)
    os.remove(path)
    logger.debug(f"[CLEAN] - Delete file \"{path}\"")


async def on_startup(_):
    """
    –î–µ–π—Å—Ç–≤–∏–µ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞.
    """
    if not os.path.exists("./temp"):
        os.mkdir("temp")

    if run_mode():
        await bt.set_webhook(WEBHOOK_URL)
    logger.success('[BOT] –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!')


async def on_shutdown(_):
    """
    –î–µ–π—Å—Ç–≤–∏–µ –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ –±–æ—Ç–∞.
    """
    ...
    if run_mode():
        await bt.delete_webhook()
    logger.critical('[BOT] –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!!!')


if __name__ == '__main__':
    if not debug_run():
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ root
        if os.getuid() != 0:
            logger.critical('–ù–µ–æ–±—Ö–æ–¥–∏–º –∑–∞–ø—É—Å–∫ –æ—Ç –∏–º–µ–Ω–∏ —Å—É–ø–µ—Ä–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è')
            exit()
    if run_mode():
        logger.debug('[BOT] –ó–∞–ø—É—Å–∫ –≤ —Ä–µ–∂–∏–º–µ WEBHOOK')
        executor.start_webhook(
            dispatcher=dp,
            webhook_path=WEBHOOK_PATH,
            on_startup=on_startup,
            on_shutdown=on_shutdown,
            skip_updates=True,
            host=WEBAPP_HOST,
            port=WEBAPP_PORT
        )
    else:
        logger.debug('[BOT] –ó–∞–ø—É—Å–∫ –≤ —Ä–µ–∂–∏–º–µ POLLING')
        executor.start_polling(dp, skip_updates=True, on_startup=on_startup, on_shutdown=on_shutdown)
